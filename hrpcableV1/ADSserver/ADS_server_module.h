///////////////////////////////////////////////////////////////////////////////
// ADS_server_module.h
#pragma once

#include "ADSserverInterfaces.h"
#include "AdsR0.h"

//pour la commande du robot
#include "Robot.h"

// parameter ids for TwinCAT module ADS_server_module with disabled code generation
// could be moved to ADSserverServices.h
const PTCID PID_ADS_server_moduleAdsPort        = 0x00000002;

class CADS_server_module 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
	, public CAdsR0FifoPort
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_ADSserverCADS_server_module)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CADS_server_module();
	virtual	~CADS_server_module();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

	// CAds
	virtual	void	AdsReadWriteInd
	(
		AmsAddr& rAddr, 
		ULONG invokeId, 
		ULONG indexGroup,
		ULONG indexOffset, 
		ULONG cbReadLength, 
		ULONG cbWriteLength, 
		PVOID pData 
	);

	virtual void AdsReadCon
	(
		AmsAddr& rAddr, 
		ULONG invokeId, 
		ULONG result, 
		ULONG cbLength, 
		PVOID pData
	);

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	WORD m_DefaultAdsPort;
	WORD m_ContextAdsPort;
	ULONG m_Counter;
	ADS_server_moduleInputs m_Inputs;
	ADS_server_moduleOutputs m_Outputs;
	ADS_server_moduleikusiDataIN m_ikusiDataIN;
	ADS_server_moduleCAN m_CAN;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	void SubmitAdsReadReq();
	enum 
	{
		invokeIdReadByOidAndPid = 1
	};
	ULONG  m_ReadByOidAndPid;

//****************** TO ************************************************
	BOOL FlagEnable;
	Robot CableBot; //déclaration de la classe robot
//**********************************************************************
};
