///////////////////////////////////////////////////////////////////////////////
// Ikusi_module.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Ikusi_module.h"

static int flag_Uart_State;

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CIkusi_module
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CIkusi_module
BEGIN_INTERFACE_MAP(CIkusi_module)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CIkusi_module)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CIkusi_module)
IMPLEMENT_ITCADI(CIkusi_module)
IMPLEMENT_ITCWATCHSOURCE(CIkusi_module)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CIkusi_module 
BEGIN_SETOBJPARA_MAP(CIkusi_module)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_Ikusi_moduleParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CIkusi_module 
BEGIN_GETOBJPARA_MAP(CIkusi_module)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_Ikusi_moduleParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CIkusi_module
BEGIN_OBJPARAWATCH_MAP(CIkusi_module)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CIkusi_module
BEGIN_OBJDATAAREA_MAP(CIkusi_module)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_Ikusi_moduleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_Ikusi_moduleOutputs, m_Outputs)
	OBJDATAAREA_VALUE(ADI_Ikusi_moduleikusiDataOUT, m_ikusiDataOUT)
	OBJDATAAREA_VALUE(ADI_Ikusi_moduleCAN, m_CAN)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CIkusi_module::CIkusi_module()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	memset(&m_ikusiDataOUT, 0, sizeof(m_ikusiDataOUT));
	memset(&m_CAN, 0, sizeof(m_CAN));
///</AutoGeneratedContent>

	flag_Uart_State=0;
	Telecommande.Init();
}

///////////////////////////////////////////////////////////////////////////////
CIkusi_module::~CIkusi_module() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CIkusi_module)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CIkusi_module::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CIkusi_module::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CIkusi_module::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CIkusi_module::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CIkusi_module::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	int i=0;
	int trameLng=0;

	HRESULT hr = S_OK;

		m_ikusiDataOUT.CAN0=m_CAN.CAN0;
		m_ikusiDataOUT.CAN1=m_CAN.CAN1;
		m_ikusiDataOUT.CAN2=m_CAN.CAN2;
		m_ikusiDataOUT.CAN3=m_CAN.CAN3;
		m_ikusiDataOUT.CAN4=m_CAN.CAN4;
		m_ikusiDataOUT.CAN5=m_CAN.CAN5;
		m_ikusiDataOUT.CAN6=m_CAN.CAN6;
		m_ikusiDataOUT.CAN7=m_CAN.CAN7;

		m_Outputs.Value=flag_Uart_State;

		switch(flag_Uart_State)
		{

				case 0: //initialisation uart 1/3
					m_Outputs.Init_Request = 1;
					flag_Uart_State++;
					break;
		

				case 1: //initialisation uart 2/3
						if(m_Inputs.Init_Accepted==1)
						{
							m_Outputs.Init_Request = 0;
							flag_Uart_State++;
						}
					break;

				case 2: //initialisation uart 3/3
						if(m_Inputs.Init_Accepted==0)
						{
							flag_Uart_State++;
						}
					break;
//UART prête

//A priori vue que la télécommande marche sur request pas besoin de faire plusieur tâche
//Send Request
//Send FE
				case 3:
					m_Outputs.Receive_Accepted=0;
					m_Outputs.Output_Length=1;
					m_Outputs.DataOUT[0]=Telecommande.FE;
					m_Outputs.Transmit_Request=1;
					flag_Uart_State++;
					break;

				case 4:
						if(m_Inputs.Transmit_Accepted==1)
						{
							m_Outputs.Transmit_Request = 0;
							flag_Uart_State++;
							//flag_Uart_State=8;
						}
					break;


//Send trame init 1
				case 5:
						if(m_Inputs.Input_Length>=1)
						{
							m_Outputs.Receive_Accepted=1;
							m_Inputs.Input_Length=0;
						}

					m_Outputs.Receive_Accepted=0;
					m_Outputs.Output_Length=5;
					m_Outputs.DataOUT[0]=Telecommande.init1[0];
					m_Outputs.DataOUT[1]=Telecommande.init1[1];
					m_Outputs.DataOUT[2]=Telecommande.init1[2];
					m_Outputs.DataOUT[3]=Telecommande.init1[3];
					m_Outputs.DataOUT[4]=Telecommande.init1[4];
					m_Outputs.Transmit_Request=1;
					flag_Uart_State++;
					break;

				case 6:
						if(m_Inputs.Transmit_Accepted==1)
						{
							m_Outputs.Transmit_Request = 0;
							flag_Uart_State++;
						}
					break;

//Send trame init 2
				case 7:
						if(m_Inputs.Input_Length>=1)
						{
							m_Outputs.Receive_Accepted=1;
							m_Inputs.Input_Length=0;
						}

					m_Outputs.Receive_Accepted=0;
					m_Outputs.Output_Length=5;
					m_Outputs.DataOUT[0]=Telecommande.init2[0];
					m_Outputs.DataOUT[1]=Telecommande.init2[1];
					m_Outputs.DataOUT[2]=Telecommande.init2[2];
					m_Outputs.DataOUT[3]=Telecommande.init2[3];
					m_Outputs.DataOUT[4]=Telecommande.init2[4];
					m_Outputs.Transmit_Request=1;
					flag_Uart_State++;
					break;

				case 8:
						if(m_Inputs.Transmit_Accepted==1)
						{
							m_Outputs.Transmit_Request = 0;
							flag_Uart_State++;
						}
					break;

//Send trame request data
				case 9:
					m_Outputs.Receive_Accepted=0;
					m_Outputs.Output_Length=5;
					m_Outputs.DataOUT[0]=Telecommande.requestData[0];
					m_Outputs.DataOUT[1]=Telecommande.requestData[1];
					m_Outputs.DataOUT[2]=Telecommande.requestData[2];
					m_Outputs.DataOUT[3]=Telecommande.requestData[3];
					m_Outputs.DataOUT[4]=Telecommande.requestData[4];
					m_Outputs.Transmit_Request=1;
					flag_Uart_State++;
					break;

				case 10:
						if(m_Inputs.Transmit_Accepted==1)
						{
							m_Outputs.Transmit_Request = 0;
							flag_Uart_State++;
						}
					break;

//Receive Data

				case 11:
						if(m_Inputs.Input_Length>=1)
						{
							m_Outputs.Receive_Accepted=1;
								for(i=0;i<=15;i++)
								{
									Telecommande.DataTrame[i]=m_Inputs.DataIN[i];
								}

								if((Telecommande.DataTrame[0]== STARTBYTE) && (Telecommande.DataTrame[1]==BYTE2) && (Telecommande.DataTrame[2]==BYTE3))
								{
									Telecommande.DecodeTrame();
									m_ikusiDataOUT.butCdp = Telecommande.Panel.btCdp;
									m_ikusiDataOUT.but1 = Telecommande.Panel.but1;
									m_ikusiDataOUT.but2 = Telecommande.Panel.but2;
									m_ikusiDataOUT.but3 = Telecommande.Panel.but3;
									m_ikusiDataOUT.but4 = Telecommande.Panel.but4;
									m_ikusiDataOUT.butRot = Telecommande.Panel.butRot;
									m_ikusiDataOUT.X = Telecommande.Panel.X;
									m_ikusiDataOUT.Y = Telecommande.Panel.Y;
									m_ikusiDataOUT.Z = Telecommande.Panel.Z;
									m_ikusiDataOUT.RX = Telecommande.Panel.RX;
									m_ikusiDataOUT.RY = Telecommande.Panel.RY;
									m_ikusiDataOUT.RZ = Telecommande.Panel.RZ;
								}
							m_Inputs.Input_Length=0;
							flag_Uart_State=9; // on renvoie "request data"
						}
					break;
		}
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CIkusi_module::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CIkusi_module::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

