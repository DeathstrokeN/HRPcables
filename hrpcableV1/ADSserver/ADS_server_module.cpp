 ///////////////////////////////////////////////////////////////////////////////
// ADS_server_module.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ADS_server_module.h"
#include "ADS_server_moduleAds.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CADS_server_module
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CADS_server_module
BEGIN_INTERFACE_MAP(CADS_server_module)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CADS_server_module)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CADS_server_module)
IMPLEMENT_ITCADI(CADS_server_module)
IMPLEMENT_ITCWATCHSOURCE(CADS_server_module)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CADS_server_module 
BEGIN_SETOBJPARA_MAP(CADS_server_module)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ADS_server_moduleDefaultAdsPort, m_DefaultAdsPort)
	SETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	SETOBJPARA_VALUE(PID_ADS_server_moduleCounter, m_Counter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CADS_server_module 
BEGIN_GETOBJPARA_MAP(CADS_server_module)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ADS_server_moduleDefaultAdsPort, m_DefaultAdsPort)
	GETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	GETOBJPARA_VALUE(PID_ADS_server_moduleCounter, m_Counter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
	GETOBJPARA_TYPE_CODE(PID_ADS_server_moduleAdsPort, WORD, *p = AmsGetPort())
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CADS_server_module
BEGIN_OBJPARAWATCH_MAP(CADS_server_module)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_ADS_server_moduleCounter, m_Counter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CADS_server_module
BEGIN_OBJDATAAREA_MAP(CADS_server_module)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_ADS_server_moduleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_ADS_server_moduleOutputs, m_Outputs)
	OBJDATAAREA_VALUE(ADI_ADS_server_moduleikusiDataIN, m_ikusiDataIN)
	OBJDATAAREA_VALUE(ADI_ADS_server_moduleCAN, m_CAN)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CADS_server_module::CADS_server_module()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_DefaultAdsPort = 0;
	m_ContextAdsPort = 0;
	m_Counter = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	memset(&m_ikusiDataIN, 0, sizeof(m_ikusiDataIN));
	memset(&m_CAN, 0, sizeof(m_CAN));
///</AutoGeneratedContent>

	FlagEnable = FALSE;
	CableBot.Init();
}

///////////////////////////////////////////////////////////////////////////////
CADS_server_module::~CADS_server_module() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CADS_server_module)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CADS_server_module::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = SUCCEEDED(hr) ? InitAmsPort(m_spSrv, m_DefaultAdsPort) : hr;

	// cleanup on failure
	if (FAILED(hr))
	{
		ShutdownAmsPort();
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CADS_server_module::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CADS_server_module::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CADS_server_module::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	ShutdownAmsPort();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CADS_server_module::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// handle pending ADS indications and confirmations
	CheckOrders();

	// TODO: Additional evaluation of input from ADS indication or confirmations

	// TODO: Submit your ADS requests 
	ULONGLONG cnt = 0;
	if (SUCCEEDED(ipTask->GetCycleCounter(&cnt)))
	{
		if (cnt%100 == 0)
		{
			SubmitAdsReadReq();
		}
	}

//***************************************************************************************
//***************************************************************************************
	// TODO: Replace the sample with your cyclic code
	m_Counter+= (1+m_Inputs.Value);
	m_Outputs.Value=m_Counter;

//Récupération Valeur Joystick
	CableBot.Joystick.btCdp=m_ikusiDataIN.butCdp;
	CableBot.Joystick.but1=m_ikusiDataIN.but1;
	CableBot.Joystick.but2=m_ikusiDataIN.but2;
	CableBot.Joystick.but3=m_ikusiDataIN.but3;
	CableBot.Joystick.but4=m_ikusiDataIN.but4;
	CableBot.Joystick.butRot=m_ikusiDataIN.butRot;
	CableBot.Joystick.X=m_ikusiDataIN.X;
	CableBot.Joystick.Y=m_ikusiDataIN.Y;
	CableBot.Joystick.Z=m_ikusiDataIN.Z;
	CableBot.Joystick.RX=m_ikusiDataIN.RX;
	CableBot.Joystick.RY=m_ikusiDataIN.RY;
	CableBot.Joystick.RZ=m_ikusiDataIN.RZ;

//Récupération Valeur CAN
	CableBot.CAN.CAN0=m_CAN.CAN0;
	CableBot.CAN.CAN1=m_CAN.CAN1;
	CableBot.CAN.CAN2=m_CAN.CAN2;
	CableBot.CAN.CAN3=m_CAN.CAN3;
	CableBot.CAN.CAN4=m_CAN.CAN4;
	CableBot.CAN.CAN5=m_CAN.CAN5;
	CableBot.CAN.CAN6=m_CAN.CAN6;
	CableBot.CAN.CAN7=m_CAN.CAN7;

	CableBot.Cyclic();
	/*if(CableBot.flagInMove==1)
	{
		m_Outputs.Main_Position_command_value[0]-=10000;
	}*/
	if(CableBot.flagInMove==1)
	{
		m_Outputs.Main_Position_command_value[0]=CableBot.NextPositionMoteur[0];
		m_Outputs.Main_Position_command_value[1]=CableBot.NextPositionMoteur[1];
		m_Outputs.Main_Position_command_value[2]=CableBot.NextPositionMoteur[2];
		m_Outputs.Main_Position_command_value[3]=CableBot.NextPositionMoteur[3];
		m_Outputs.Main_Position_command_value[4]=CableBot.NextPositionMoteur[4];
		m_Outputs.Main_Position_command_value[5]=CableBot.NextPositionMoteur[5];
		m_Outputs.Main_Position_command_value[6]=CableBot.NextPositionMoteur[6];
		m_Outputs.Main_Position_command_value[7]=CableBot.NextPositionMoteur[7];
	}


	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CADS_server_module::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CADS_server_module::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CADS_server_module::AdsReadWriteInd
(
	AmsAddr& rAddr, 
	ULONG invokeId, 
	ULONG indexGroup,
	ULONG indexOffset, 
	ULONG cbReadLength, 
	ULONG cbWriteLength, 
	PVOID pData 
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, indexGroup=0x%08x, indexOffset=0x%08x, cbReadLength=%d, cbWriteLength=%d, pData=0x%p",
		m_objId.value, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pData);

	switch(indexGroup)
		{		
				case ADSserver_grp_MAIN:
					switch(indexOffset)
					{

							case ADSserverIndexOff_enable:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );
								
								// TODO: add custom code here
									if (FlagEnable == FALSE) //Mise en route
									{
										FlagEnable = TRUE;
#ifdef MODE_POSITION
//on synchronise la position actuelle avec la commande pour que rien ne bouge lorsque on est en position
										CableBot.StartPositionMoteur[0]=m_Inputs.Main_Position_feedback_1_value[0];
										CableBot.StartPositionMoteur[1]=m_Inputs.Main_Position_feedback_1_value[1];
										CableBot.StartPositionMoteur[2]=m_Inputs.Main_Position_feedback_1_value[2];
										CableBot.StartPositionMoteur[3]=m_Inputs.Main_Position_feedback_1_value[3];
										CableBot.StartPositionMoteur[4]=m_Inputs.Main_Position_feedback_1_value[4];
										CableBot.StartPositionMoteur[5]=m_Inputs.Main_Position_feedback_1_value[5];
										CableBot.StartPositionMoteur[6]=m_Inputs.Main_Position_feedback_1_value[6];
										CableBot.StartPositionMoteur[7]=m_Inputs.Main_Position_feedback_1_value[7];

										m_Outputs.Main_Position_command_value[0]=CableBot.StartPositionMoteur[0];
										m_Outputs.Main_Position_command_value[1]=CableBot.StartPositionMoteur[1];
										m_Outputs.Main_Position_command_value[2]=CableBot.StartPositionMoteur[2];
										m_Outputs.Main_Position_command_value[3]=CableBot.StartPositionMoteur[3];
										m_Outputs.Main_Position_command_value[4]=CableBot.StartPositionMoteur[4];
										m_Outputs.Main_Position_command_value[5]=CableBot.StartPositionMoteur[5];
										m_Outputs.Main_Position_command_value[6]=CableBot.StartPositionMoteur[6];
										m_Outputs.Main_Position_command_value[7]=CableBot.StartPositionMoteur[7];
										
//Puis on met enable les vars
//ATTENTION EN MODE POSITION SI ON NE FAIT PAS CA LES MOTEURS PARTENT DIRECT SE REMETTRE EN POSITION 0
#endif

										m_Outputs.Main_Master_control_word[0]=0xE000;
										m_Outputs.Main_Master_control_word[1]=0xE000;
										m_Outputs.Main_Master_control_word[2]=0xE000;
										m_Outputs.Main_Master_control_word[3]=0xE000;
										m_Outputs.Main_Master_control_word[4]=0xE000;
										m_Outputs.Main_Master_control_word[5]=0xE000;
										m_Outputs.Main_Master_control_word[6]=0xE000;
										m_Outputs.Main_Master_control_word[7]=0xE000;
										//CableBot.flagInMove=1;
									}
									else //Arrêt
									{
										FlagEnable = FALSE;
										m_Outputs.Main_Master_control_word[0]=0x0000;
										m_Outputs.Main_Master_control_word[1]=0x0000;
										m_Outputs.Main_Master_control_word[2]=0x0000;
										m_Outputs.Main_Master_control_word[3]=0x0000;
										m_Outputs.Main_Master_control_word[4]=0x0000;
										m_Outputs.Main_Master_control_word[5]=0x0000;
										m_Outputs.Main_Master_control_word[6]=0x0000;
										m_Outputs.Main_Master_control_word[7]=0x0000;
										//CableBot.flagInMove=0;
									}	

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_setvalue:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								{
									long *pValue = (long*) pData;
									m_Outputs.Main_Position_command_value[0]=(LONG)*pValue; //*2^20;
									m_Outputs.Main_Position_command_value[1]=(LONG)*pValue*(-1);
									m_Outputs.Main_Position_command_value[2]=(LONG)*pValue;
									m_Outputs.Main_Position_command_value[3]=(LONG)*pValue*(-1);
									m_Outputs.Main_Position_command_value[4]=(LONG)*pValue;
									m_Outputs.Main_Position_command_value[5]=(LONG)*pValue*(-1);
									m_Outputs.Main_Position_command_value[6]=(LONG)*pValue;
									m_Outputs.Main_Position_command_value[7]=(LONG)*pValue*(-1);

									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}
							break;

							case ADSserverIndexOff_setCmd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								//long *pcmd = (long*) pData;
								{
									long *pValue = (long*) pData;
									int cmd=(INT)*pValue;
						
										switch(cmd)
										{
											case FCT_WAIT:
												CableBot.cmd=FCT_WAIT;
												//CableBot.state=STATE_WAITING;
												//Pour le wait on active juste un flag reste dans l'état ou il était et met en pause le mouvement 
												if (CableBot.flagWait==1)
												{
													CableBot.flagWait=0; //fonctionnement normal
												}
												else
												{
													CableBot.flagWait=1; //mouvement en pose
												}
											break;

											case FCT_INIT:
												CableBot.cmd=FCT_INIT;
												CableBot.state=STATE_INIT;
												CableBot.Init();
												CableBot.cmd=FCT_WAIT;
												CableBot.state= STATE_INIT;
												CableBot.flagWait=1;
											break;

											case FCT_HOME:
//on prend les valeurs actuelles des codeurs
												CableBot.StartPositionMoteur[0]=m_Inputs.Main_Position_feedback_1_value[0];
												CableBot.StartPositionMoteur[1]=m_Inputs.Main_Position_feedback_1_value[1];
												CableBot.StartPositionMoteur[2]=m_Inputs.Main_Position_feedback_1_value[2];
												CableBot.StartPositionMoteur[3]=m_Inputs.Main_Position_feedback_1_value[3];
												CableBot.StartPositionMoteur[4]=m_Inputs.Main_Position_feedback_1_value[4];
												CableBot.StartPositionMoteur[5]=m_Inputs.Main_Position_feedback_1_value[5];
												CableBot.StartPositionMoteur[6]=m_Inputs.Main_Position_feedback_1_value[6];
												CableBot.StartPositionMoteur[7]=m_Inputs.Main_Position_feedback_1_value[7];
												
//valeur de homing des codeurs (normalement 0)
												CableBot.HomePositionMoteur[0]=0;
												CableBot.HomePositionMoteur[1]=0;
												CableBot.HomePositionMoteur[2]=0;
												CableBot.HomePositionMoteur[3]=0;
												CableBot.HomePositionMoteur[4]=0;
												CableBot.HomePositionMoteur[5]=0;
												CableBot.HomePositionMoteur[6]=0;
												CableBot.HomePositionMoteur[7]=0;

												CableBot.t_movement = 0; //temps passé entre Xi et Xcurrent en s à remettre a 0 à chaque nouveau Xf
												CableBot.flagWait=0;
												CableBot.cmd=FCT_HOME;
												CableBot.state=STATE_HOMING;

												/*m_Outputs.Main_Position_command_value[0]=0;
												m_Outputs.Main_Position_command_value[1]=0;
												m_Outputs.Main_Position_command_value[2]=0;
												m_Outputs.Main_Position_command_value[3]=0;
												m_Outputs.Main_Position_command_value[4]=0;
												m_Outputs.Main_Position_command_value[5]=0;
												m_Outputs.Main_Position_command_value[6]=0;
												m_Outputs.Main_Position_command_value[7]=0;
												CableBot.cmd=FCT_WAIT;
												CableBot.state=STATE_WAITING;*/
											break;

											case FCT_MOVE:
												CableBot.flagWait=0;
												CableBot.cmd=FCT_MOVE;
												CableBot.state=STATE_MOVING;
												
												/*	if (CableBot.flagInMove==1)
													{
														CableBot.flagInMove=0;
													}
													else
													{
														CableBot.flagInMove=1;
													};*/
											break;

											case FCT_TELEOPERATE:
												CableBot.flagWait=0;
												CableBot.cmd=FCT_TELEOPERATE;
												CableBot.state=STATE_TELEOPERATING;
												
												/*	if (CableBot.flagInMove==1)
													{
														CableBot.flagInMove=0;
													}
													else
													{
														CableBot.flagInMove=1;
													};*/
											break;
										}
								
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

							break;

							case ADSserverIndexOff_readState:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );
								
								pData = &CableBot.state;

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								//AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL);
							break;

							case ADSserverIndexOff_setDataMove:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								{
									long *pValue = (long*) pData;

									/*CableBot.Positions[0].X = 0;
									CableBot.Positions[0].Y = 0;
									CableBot.Positions[0].Z = 1000;
									CableBot.Positions[0].TX = 0;
									CableBot.Positions[0].TY = 0;
									CableBot.Positions[0].TZ = 0;
									CableBot.Positions[0].duration = 3;
											
									
									CableBot.NbrePoint++;
									CableBot.flagInMove=0;*/
									
										if(CableBot.indexPositionArray<NBR_MAX_POSITION)
										{
												switch(CableBot.indexPositionMember)
												{
													case X_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].X = (LONG)*pValue;
													break;

													case Y_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].Y = (LONG)*pValue;
													break;

													case Z_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].Z = (LONG)*pValue;
													break;

													case TX_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].TX = (LONG)*pValue;
													break;

													case TY_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].TY = (LONG)*pValue;
													break;

													case TZ_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].TZ = (LONG)*pValue;
													break;

													case DURATION_INDEX:
														CableBot.Positions[CableBot.indexPositionArray].duration = (LONG)*pValue;
													break;
												}
											
											CableBot.indexPositionMember++;
												if(CableBot.indexPositionMember>=7)
												{
													CableBot.indexPositionArray++; //on incrémente d'une position
													CableBot.indexPositionMember=0; // et on repart sur X
												}
										}

									pData = &CableBot.NbrePoint;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								//	CableBot.NbrePoint=CableBot.indexPositionArray+1; //nombre de points envoyés
									CableBot.NbrePoint=CableBot.indexPositionArray; //nombre de points envoyés
									CableBot.flagInMove=0;
								}
							break;
							
					}
				break;

				case ADSserver_grp_A0:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[0]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[0]=((LONG)*pValue)*pow_(2,20);
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[0]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[0]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[0]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;
					}
				break;

				case ADSserver_grp_A1:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[1]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[1]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[1]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[1]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[1]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;
					}
				break;

				case ADSserver_grp_A2:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[2]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[2]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[2]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}


								 
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[2]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[2]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;
					}
				break;

				case ADSserver_grp_A3:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[3]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[3]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[3]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[3]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[3]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;
					}
				break;

				case ADSserver_grp_A4:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[4]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[4]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[4]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[4]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[4]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;
					}
				break;

				case ADSserver_grp_A5:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[5]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[5]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[5]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[5]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[5]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;
					}
				break;

				case ADSserver_grp_A6:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[6]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[6]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[6]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[6]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[6]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;
					}
				break;

				case ADSserver_grp_A7:
					switch(indexOffset)
					{

							case ADSserverIndexOff_dsw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_pf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_fd:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here


								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_vf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_tf:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mt:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_dis:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here

								AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 0, NULL); 
							break;

							case ADSserverIndexOff_mcw:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Master_control_word[7]=(USHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_pc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Position_command_value[7]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_vc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Velocity_command_value[7]=(LONG)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								
							break;

							case ADSserverIndexOff_tc:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Torque_command_value[7]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;

							case ADSserverIndexOff_do:
								m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
								m_objId.value, indexGroup, indexOffset );

								// TODO: add custom code here
								{
									unsigned long *pValue = (unsigned long*) pData;
									m_Outputs.Main_Digital_outputs[7]=(SHORT)*pValue;
									AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, 4, pData);
								}

								 
							break;
					}
				break;


	
				default:
					__super::AdsReadWriteInd(rAddr, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pData); 
				break;
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}


void CADS_server_module::SubmitAdsReadReq()
{
	m_Trace.Log(tlVerbose, FENTERA);
	// m_ContextAdsPort contains the ADS port number of the task associated with context 1
	// amsAddr refers to the ADS port of this task 
	AmsAddr amsAddr(this->AmsGetNetId(), m_ContextAdsPort);

	// Request the value of a parameter from a TwinCAT module instance
	// via the task ADS port.
	// The object id of the instance is passed as index group and
	// the parameter id is passed as index offset.
	// The result is delivered by a call to AdsReadCon and can 
	// be identified by the invoke id. 
	int nRes = 
		AdsReadReq
		(
			amsAddr, 
			invokeIdReadByOidAndPid, 
			m_objId.value, 
			PID_ADS_server_moduleCounter,
			sizeof(m_ReadByOidAndPid)
		);
	if (nRes != ADSERR_NOERR)
	{
		m_Trace.Log(tlError, FNAMEA "AdsReadReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
	}
	else
	{
		m_Trace.Log(tlInfo, FNAMEA "AdsReadReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_ADS_server_moduleAdsPort);
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CADS_server_module::AdsReadCon
(
	AmsAddr& rAddr,
	ULONG invokeId,
	ULONG nResult,
	ULONG cbLength,
	PVOID pData
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, nResult=0x%08x, cbLength=%d, pData=0x%p",
		m_objId.value, invokeId, nResult, cbLength, pData);

	if (invokeId == invokeIdReadByOidAndPid)
	{
		if (nResult != ADSERR_NOERR)
		{
			m_Trace.Log(tlWarning, FNAMEA "ReadByOidAndPid failed with error=0x%x(%s)",
				nResult, AdsGetErrorText(nResult));
		}
		else if (cbLength == sizeof(m_ReadByOidAndPid))
		{
			m_ReadByOidAndPid = *static_cast<PULONG>(pData); 
			m_Trace.Log(tlInfo, FNAMEA "m_ReadByOidAndPid=0x%x", m_ReadByOidAndPid);
		}
	}
	else
	{
		__super::AdsReadWriteCon( rAddr, invokeId, nResult, cbLength, pData );
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

